import React, { useState, useEffect } from 'react';
import { cockpit3dProducts } from '../data/cockpit3d-products'; // Your source data
import { Download, Save, Upload, Edit, Eye, EyeOff } from 'lucide-react';
import { Container, Row, Col, Alert, Button, Form, Card } from 'react-bootstrap';

const ProductAdmin = () => {
  const [sourceProducts] = useState(cockpit3dProducts); // Read-only source
  const [editedProducts, setEditedProducts] = useState({});
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showPreview, setShowPreview] = useState(false);

  // Load existing customizations
  useEffect(() => {
    const loadExistingCustomizations = async () => {
      try {
        const saved = localStorage.getItem('productCustomizations');
        if (saved) {
          setEditedProducts(JSON.parse(saved));
        }
      } catch (e) {
        console.warn('No existing customizations found');
      }
    };
    loadExistingCustomizations();
  }, []);

  // Get product data (source + customizations)
  const getProductData = (productId) => {
    const sourceProduct = sourceProducts.find(p => p.id === productId);
    const customizations = editedProducts[productId] || {};
    return { ...sourceProduct, ...customizations };
  };

  // Update product customization
  const updateProduct = (productId, updates) => {
    setEditedProducts(prev => ({
      ...prev,
      [productId]: { ...prev[productId], ...updates }
    }));
  };

  // Generate final-products.js content
  const generateFinalProducts = () => {
    const finalProducts = sourceProducts.map(product => {
      const customizations = editedProducts[product.id] || {};
      
      // Merge source data with customizations
      const finalProduct = { ...product };
      
      // Apply customizations
      if (customizations.name) finalProduct.name = customizations.name;
      if (customizations.description) finalProduct.description = customizations.description;
      if (customizations.longDescription) finalProduct.longDescription = customizations.longDescription;
      if (customizations.basePrice) finalProduct.basePrice = customizations.basePrice;
      if (customizations.featured !== undefined) finalProduct.featured = customizations.featured;
      
      // Handle size pricing overrides
      if (customizations.sizes) {
        finalProduct.sizes = finalProduct.sizes?.map((size, index) => ({
          ...size,
          ...(customizations.sizes[index] || {})
        }));
      }
      
      return finalProduct;
    });

    // Generate the JavaScript file content
    return `// final-products.js - Generated by Admin Panel
// DO NOT EDIT MANUALLY - Generated from cockpit3d-products.js + customizations
// Generated: ${new Date().toISOString()}

export const finalProducts = ${JSON.stringify(finalProducts, null, 2)};

export const sourceInfo = {
  generated_at: "${new Date().toISOString()}",
  source_products: ${sourceProducts.length},
  customized_products: ${Object.keys(editedProducts).length},
  total_products: ${finalProducts.length}
};

export default finalProducts;
`;
  };

  // Save final-products.js file
  const saveFinalProducts = () => {
    const content = generateFinalProducts();
    const blob = new Blob([content], { type: 'application/javascript' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'final-products.js';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    // Also save to localStorage
    localStorage.setItem('productCustomizations', JSON.stringify(editedProducts));
    
    alert('final-products.js generated! Replace the file in your src/data/ folder.');
  };

  const hasCustomizations = (productId) => {
    return editedProducts[productId] && Object.keys(editedProducts[productId]).length > 0;
  };

  return (
    <Container fluid className="mt-3">
      {/* Header */}
      <Row className="mb-4">
        <Col>
          <h1 className="display-4">Product Admin Panel</h1>
        </Col>
        <Col xs="auto">
          <Button
            variant={showPreview ? "outline-primary" : "primary"}
            onClick={() => setShowPreview(!showPreview)}
            className="me-2"
          >
            {showPreview ? <EyeOff size={20} /> : <Eye size={20} />}
            {showPreview ? ' Hide Preview' : ' Show Preview'}
          </Button>
          <Button
            variant="success"
            onClick={saveFinalProducts}
          >
            <Download size={20} />
            {' Generate final-products.js'}
          </Button>
        </Col>
      </Row>

      <Row>
        {/* Product List */}
        <Col md={4}>
          <Card>
            <Card.Header>
              <h5 className="mb-0">Products ({sourceProducts.length})</h5>
            </Card.Header>
            <Card.Body className="p-0" style={{maxHeight: '600px', overflowY: 'auto'}}>
              {sourceProducts.map(product => (
                <div
                  key={product.id}
                  className={`p-3 border-bottom ${
                    selectedProduct?.id === product.id ? 'bg-primary bg-opacity-10 border-primary' : ''
                  }`}
                  style={{cursor: 'pointer'}}
                  onClick={() => setSelectedProduct(product)}
                >
                  <div className="d-flex justify-content-between align-items-start">
                    <div>
                      <h6 className="mb-1">{product.name}</h6>
                      <small className="text-muted">ID: {product.id} â€¢ SKU: {product.sku}</small>
                      <div className="text-success fw-bold">${product.basePrice}</div>
                      {hasCustomizations(product.id) && (
                        <span className="badge bg-success mt-1">Modified</span>
                      )}
                    </div>
                    <Edit size={16} className="text-muted" />
                  </div>
                </div>
              ))}
            </Card.Body>
          </Card>
        </Col>

        {/* Edit Panel */}
        <Col md={4}>
          <Card>
            <Card.Header>
              <h5 className="mb-0">
                {selectedProduct ? `Edit: ${selectedProduct.name}` : 'Select a Product'}
              </h5>
            </Card.Header>
            <Card.Body>
              {selectedProduct ? (
                <Form>
                  {/* Basic Info */}
                  <Form.Group className="mb-3">
                    <Form.Label>Display Name</Form.Label>
                    <Form.Control
                      type="text"
                      value={getProductData(selectedProduct.id).name}
                      onChange={(e) => updateProduct(selectedProduct.id, { name: e.target.value })}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>Short Description</Form.Label>
                    <Form.Control
                      type="text"
                      value={getProductData(selectedProduct.id).description || ''}
                      onChange={(e) => updateProduct(selectedProduct.id, { description: e.target.value })}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>Long Description</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={3}
                      value={getProductData(selectedProduct.id).longDescription || ''}
                      onChange={(e) => updateProduct(selectedProduct.id, { longDescription: e.target.value })}
                      placeholder="Detailed product description..."
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>Base Price Override</Form.Label>
                    <Form.Control
                      type="number"
                      step="0.01"
                      value={getProductData(selectedProduct.id).basePrice}
                      onChange={(e) => updateProduct(selectedProduct.id, { basePrice: parseFloat(e.target.value) })}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Check
                      type="checkbox"
                      label="Show as featured product"
                      checked={getProductData(selectedProduct.id).featured || false}
                      onChange={(e) => updateProduct(selectedProduct.id, { featured: e.target.checked })}
                    />
                  </Form.Group>

                  {/* Size Pricing */}
                  {selectedProduct.sizes && (
                    <Form.Group className="mb-3">
                      <Form.Label>Size Pricing</Form.Label>
                      {selectedProduct.sizes.map((size, index) => (
                        <div key={size.id} className="d-flex align-items-center mb-2">
                          <Form.Label className="me-2 mb-0" style={{minWidth: '100px'}}>
                            {size.name}
                          </Form.Label>
                          <Form.Control
                            type="number"
                            step="0.01"
                            style={{width: '100px'}}
                            value={getProductData(selectedProduct.id).sizes?.[index]?.price || size.price}
                            onChange={(e) => {
                              const updatedSizes = [...(getProductData(selectedProduct.id).sizes || selectedProduct.sizes)];
                              updatedSizes[index] = { ...updatedSizes[index], price: parseFloat(e.target.value) };
                              updateProduct(selectedProduct.id, { sizes: updatedSizes });
                            }}
                          />
                        </div>
                      ))}
                    </Form.Group>
                  )}

                  <hr />
                  <Button
                    variant="outline-danger"
                    size="sm"
                    onClick={() => {
                      const newEditedProducts = { ...editedProducts };
                      delete newEditedProducts[selectedProduct.id];
                      setEditedProducts(newEditedProducts);
                    }}
                  >
                    Reset to Original
                  </Button>
                </Form>
              ) : (
                <div className="text-center text-muted py-5">
                  <p>Select a product from the list to edit</p>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>

        {/* Preview Panel */}
        {showPreview && (
          <Col md={4}>
            <Card>
              <Card.Header>
                <h5 className="mb-0">Generated File Preview</h5>
              </Card.Header>
              <Card.Body>
                <pre className="bg-light p-3 rounded" style={{fontSize: '0.75rem', overflowX: 'auto', maxHeight: '300px'}}>
                  {generateFinalProducts()}
                </pre>
              </Card.Body>
            </Card>

            <Row className="mt-3 g-2">
              <Col>
                <Card className="bg-primary bg-opacity-10">
                  <Card.Body className="text-center">
                    <div className="fw-bold text-primary">Source Products</div>
                    <div className="display-6 fw-bold text-primary">{sourceProducts.length}</div>
                  </Card.Body>
                </Card>
              </Col>
              <Col>
                <Card className="bg-success bg-opacity-10">
                  <Card.Body className="text-center">
                    <div className="fw-bold text-success">Customized</div>
                    <div className="display-6 fw-bold text-success">{Object.keys(editedProducts).length}</div>
                  </Card.Body>
                </Card>
              </Col>
              <Col>
                <Card className="bg-info bg-opacity-10">
                  <Card.Body className="text-center">
                    <div className="fw-bold text-info">Final Products</div>
                    <div className="display-6 fw-bold text-info">{sourceProducts.length}</div>
                  </Card.Body>
                </Card>
              </Col>
            </Row>
          </Col>
        )}
      </Row>
    </Container>
  );
};

export default ProductAdmin;