import React, { useState, useEffect } from 'react';
import { cockpit3dProducts } from '../data/cockpit3d-products'; // Your source data
import { Download, Save, Upload, Edit, Eye, EyeOff } from 'lucide-react';
import { Container, Row, Col, Alert, Button, Form } from 'react-bootstrap';

const ProductAdmin = () => {
  const [sourceProducts] = useState(cockpit3dProducts); // Read-only source
  const [editedProducts, setEditedProducts] = useState({});
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showPreview, setShowPreview] = useState(false);

  // Load existing customizations
  useEffect(() => {
    const loadExistingCustomizations = async () => {
      try {
        const saved = localStorage.getItem('productCustomizations');
        if (saved) {
          setEditedProducts(JSON.parse(saved));
        }
      } catch (e) {
        console.warn('No existing customizations found');
      }
    };
    loadExistingCustomizations();
  }, []);

  // Get product data (source + customizations)
  const getProductData = (productId) => {
    const sourceProduct = sourceProducts.find(p => p.id === productId);
    const customizations = editedProducts[productId] || {};
    return { ...sourceProduct, ...customizations };
  };

  // Update product customization
  const updateProduct = (productId, updates) => {
    setEditedProducts(prev => ({
      ...prev,
      [productId]: { ...prev[productId], ...updates }
    }));
  };

  // Generate final-products.js content
  const generateFinalProducts = () => {
    const finalProducts = sourceProducts.map(product => {
      const customizations = editedProducts[product.id] || {};
      
      // Merge source data with customizations
      const finalProduct = { ...product };
      
      // Apply customizations
      if (customizations.name) finalProduct.name = customizations.name;
      if (customizations.description) finalProduct.description = customizations.description;
      if (customizations.longDescription) finalProduct.longDescription = customizations.longDescription;
      if (customizations.basePrice) finalProduct.basePrice = customizations.basePrice;
      if (customizations.featured !== undefined) finalProduct.featured = customizations.featured;
      
      // Handle size pricing overrides
      if (customizations.sizes) {
        finalProduct.sizes = finalProduct.sizes?.map((size, index) => ({
          ...size,
          ...(customizations.sizes[index] || {})
        }));
      }
      
      return finalProduct;
    });

    // Generate the JavaScript file content
    return `// final-products.js - Generated by Admin Panel
// DO NOT EDIT MANUALLY - Generated from cockpit3d-products.js + customizations
// Generated: ${new Date().toISOString()}

export const finalProducts = ${JSON.stringify(finalProducts, null, 2)};

export const sourceInfo = {
  generated_at: "${new Date().toISOString()}",
  source_products: ${sourceProducts.length},
  customized_products: ${Object.keys(editedProducts).length},
  total_products: ${finalProducts.length}
};

export default finalProducts;
`;
  };

  // Save final-products.js file
  const saveFinalProducts = () => {
    const content = generateFinalProducts();
    const blob = new Blob([content], { type: 'application/javascript' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'final-products.js';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    // Also save to localStorage
    localStorage.setItem('productCustomizations', JSON.stringify(editedProducts));
    
    alert('final-products.js generated! Replace the file in your src/data/ folder.');
  };

  const hasCustomizations = (productId) => {
    return editedProducts[productId] && Object.keys(editedProducts[productId]).length > 0;
  };

  return (
    <Container>
      <Row> 
        <h1 className="text-3xl font-bold">Product Admin Panel</h1>
             
        
        {/* Header */} 
     

        <button
          onClick={() => setShowPreview(!showPreview)}
          className="flex items-center gap-2 px-4 py-2 bg-blue-600 rounded-lg hover:bg-blue-700"
        >
          {showPreview ? <EyeOff size={20} /> : <Eye size={20} />}
          {showPreview ? 'Hide Preview' : 'Show Preview'}
        </button>
        <button
          onClick={saveFinalProducts}
          className="flex items-center gap-2 px-6 py-2 bg-green-600 rounded-lg hover:bg-green-700 font-semibold"
        >
          <Download size={20} />
          Generate final-products.js
        </button>
      </Row>

      <Row>   
        <Col className="col-sm-4"> 
          {sourceProducts.map(product => (
          <div
            key={product.id}
            className={`p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors ${
              selectedProduct?.id === product.id ? 'bg-blue-50 border-blue-200' : ''
            }`}
            onClick={() => setSelectedProduct(product)}
          >
               
            <h3 className="font-medium text-gray-900">{product.name}</h3>
            <p className="text-sm text-gray-500">ID: {product.id} â€¢ SKU: {product.sku}</p>
            <p className="text-sm text-green-600">${product.basePrice}</p>
            
            {hasCustomizations(product.id) && (
              <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
                Modified
              </span>
            )}
            <Edit size={16} className="text-gray-400" />
            <hr />
          </div>
          ))} 
        </Col>
        <Col className="col-sm-4">
            <div className="p-4 border-b border-gray-200">
              <h2 className="text-xl font-semibold">
                {selectedProduct ? `Edit: ${selectedProduct.name}` : 'Select a Product'}
              </h2>
            </div>

            {selectedProduct ? (
              <div className="p-4 space-y-4">
                {/* Basic Info */}
                <div>
                  <label className="block font-medium text-gray-700 mb-1">
                    Display Name
                  </label><br />
                  <input
                    type="text"
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                    value={getProductData(selectedProduct.id).name}
                    onChange={(e) => updateProduct(selectedProduct.id, { name: e.target.value })}
                  />
                </div>

                <div>
                  <label className="block font-medium text-gray-700 mb-1">
                    Short Description
                  </label><br />
                  <input
                    type="text"
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                    value={getProductData(selectedProduct.id).description || ''}
                    onChange={(e) => updateProduct(selectedProduct.id, { description: e.target.value })}
                  />
                </div>

                <div>
                  <label className="block font-medium text-gray-700 mb-1">
                    Long Description
                  </label><br />
                  <textarea
                    className="w-full border border-gray-300 rounded-md px-3 py-2 h-24"
                    value={getProductData(selectedProduct.id).longDescription || ''}
                    onChange={(e) => updateProduct(selectedProduct.id, { longDescription: e.target.value })}
                    placeholder="Detailed product description..."
                  />
                </div>

                <div>
                  <label className="block font-medium text-gray-700 mb-1">
                    Base Price Override
                  </label><br />
                  <input
                    type="number"
                    step="0.01"
                    className="w-full border border-gray-300 rounded-md px-3 py-2"
                    value={getProductData(selectedProduct.id).basePrice}
                    onChange={(e) => updateProduct(selectedProduct.id, { basePrice: parseFloat(e.target.value) })}
                  />
                </div>

                <div>
                  <label className="block font-medium text-gray-700 mb-1">
                    Featured Product
                  </label><br />
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="rounded border-gray-300"
                      checked={getProductData(selectedProduct.id).featured || false}
                      onChange={(e) => updateProduct(selectedProduct.id, { featured: e.target.checked })}
                    />
                    <span className="ml-2 text-sm text-gray-600">Show as featured product</span>
                  </label>
                </div>

                {/* Size Pricing */}
                {selectedProduct.sizes && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Size Pricing</h4>
                    <div className="space-y-2">
                      {selectedProduct.sizes.map((size, index) => (
                        <div key={size.id} className="flex items-center gap-2">
                          <span className="text-sm text-gray-600 flex-1">{size.name}</span>
                          <input
                            type="number"
                            step="0.01"
                            className="border border-gray-300 rounded px-2 py-1 w-20"
                            value={getProductData(selectedProduct.id).sizes?.[index]?.price || size.price}
                            onChange={(e) => {
                              const updatedSizes = [...(getProductData(selectedProduct.id).sizes || selectedProduct.sizes)];
                              updatedSizes[index] = { ...updatedSizes[index], price: parseFloat(e.target.value) };
                              updateProduct(selectedProduct.id, { sizes: updatedSizes });
                            }}
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <div className="pt-4 border-t">
                  <button
                    onClick={() => {
                      const newEditedProducts = { ...editedProducts };
                      delete newEditedProducts[selectedProduct.id];
                      setEditedProducts(newEditedProducts);
                    }}
                    className="text-red-600 hover:text-red-800 text-sm"
                  >
                    Reset to Original
                  </button>
                </div>
              </div>
            ) : (
              <div className="p-8 text-center text-gray-500">
                Select a product from the list to edit
              </div>
            )} 

        </Col>

      {showPreview && (
        <Col className="col-sm-4">
          {/* Preview Panel */}
          
            <div className="mt-6 rounded-lg shadow-sm">
              <div className="p-4 border-b border-gray-200">
                <h2 className="text-xl font-semibold text-gray-900">Generated File Preview</h2>
              </div>
              <div className="p-4">
                <pre className="bg-gray-50 p-4 rounded-lg text-xs overflow-auto max-h-64">
                  {generateFinalProducts()}
                </pre>
              </div>
            </div>
          

          <div className="mt-4 grid grid-cols-3 gap-4 text-sm">
            <div className="bg-blue-50 p-3 rounded">
              <div className="font-semibold text-blue-800">Source Products</div>
              <div className="text-2xl font-bold text-blue-600">{sourceProducts.length}</div>
            </div>
            <div className="bg-green-50 p-3 rounded">
              <div className="font-semibold text-green-800">Customized</div>
              <div className="text-2xl font-bold text-green-600">{Object.keys(editedProducts).length}</div>
            </div>
            <div className="bg-purple-50 p-3 rounded">
              <div className="font-semibold text-purple-800">Final Products</div>
              <div className="text-2xl font-bold text-purple-600">{sourceProducts.length}</div>
            </div>
          </div> 

        </Col>
        )}
      </Row>
    </Container>



  
  );
};

export default ProductAdmin;